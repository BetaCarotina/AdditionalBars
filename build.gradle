buildscript {
    repositories {
        maven {
            name "forge"
            url = 'https://files.minecraftforge.net/maven'
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.+', changing: true
    }
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = project.mod_version
group = project.maven_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.minecraft_version + '-' + project.archive_base_name

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = project.eclipse_java_version // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: mappings_channel, version: mappings_version
    runs {
        client {
            workingDirectory file('run')

            if (project.hasProperty('mc_uuid')) {
                //Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                //Your access token, you can find it in your '.minecraft/launcher_profiles.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }
            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            mods {
                additionalbars {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('run')

            // Recommended logging data for a userdev environment
            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            mods {
                additionalbars {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('run')

            environment 'target', 'fmluserdevdata'
            //This fixes Mixin application problems from other mods because their refMaps are SRG-based,
            // but we're in a MCP env
            property "mixin.env.disableRefMap", "true"
            if (project.hasProperty('forge_force_ansi')) {
                //Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            args '--all', '--output', file('src/generated/resources'),
                    '--mod', 'additionalbars',
                    '--existing', file('src/main/resources/')

            mods {
                additionalbars {
                    source sourceSets.main
                }
            }
        }
    }
}

//repositories {
//    maven {
//        name 'ForgeFS'
//        url 'https://files.minecraftforge.net/maven'
//        content {
//            includeGroupByRegex 'net\\.minecraftforge.*'
//            includeGroup 'de.oceanlabs.mcp'
//            includeGroup 'cpw.mods'
//        }
//    }
//    maven {
//        name 'CurseMaven'
//        url 'https://www.cursemaven.com'
//        content {
//            includeGroup 'curse.maven'
//        }
//    }
//    maven {
//        name 'Modmaven'
//        url 'https://modmaven.dev/'
//        content {
//            includeGroup 'appeng'
//        }
//    }
//    maven {
//        name 'HWYLA'
//        url "https://maven.tehnut.info"
//        content {
//            includeGroup 'mcp.mobius.waila'
//        }
//    }
//}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

//    compileOnly "org.jetbrains:annotations:${jb_annotations}"
//
//    compileOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}:api")
//    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}")
//
//    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}:api")
//    runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": project.name,
                "Specification-Vendor": "Additional-Bars",
                "Specification-Version": "${project.mod_version}", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${project.mod_version}",
                "Implementation-Vendor" :"Additional-Bars",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
