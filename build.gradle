buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.+', changing: true
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
idea {
    module {
        inheritOutputDirs = true

        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

sourceSets {
    bop {
        setupSourceSet(bop, 'bop')
    }
    byg {
        setupSourceSet(byg, 'byg')
    }

}
/*defines source files and resources, and main mod classpath for addon mods*/
def setupSourceSet(SourceSet srcSet, String name) {
    srcSet.java {
        srcDir 'src/' + name + '/java'
    }
    srcSet.resources {
        srcDir 'src/' + name + '/resources'
    }
    srcSet.compileClasspath += sourceSets.main.output
}

/*Defines subs dependencies to main mod and also forge libs so addons can see all dependencies*/
configurations {
    def compileExtenders = [bopCompile, bygCompile]
    def implementationExtenders = [bopImplementation, bygImplementation]
    def compileOnlyExtenders = [bopCompileOnly, bygCompileOnly]
    def runtimeOnlyExtenders = [bopRuntimeOnly, bygRuntimeOnly]

    for (def compileExtender : compileExtenders) {
        compileExtender.extendsFrom(compile)
    }
    for (def implementationExtender : implementationExtenders) {
        implementationExtender.extendsFrom(implementation)
    }
    for (def compileOnlyExtender : compileOnlyExtenders) {
        compileOnlyExtender.extendsFrom(compileOnly)
    }
    for (def runtimeOnlyExtender : runtimeOnlyExtenders) {
        runtimeOnlyExtender.extendsFrom(runtimeOnly)
    }
}

version = project.mod_version
group = project.maven_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.minecraft_version + '-' + project.archive_base_name

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = project.eclipse_java_version // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: project.mappings_channel, version: project.mappings_version
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                additionalbars {
                    source sourceSets.main
                    source sourceSets.bop
                    source sourceSets.byg
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                additionalbars {
                    source sourceSets.main
                    source sourceSets.bop
                    source sourceSets.byg
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'additionalbars', '--all', '--output', file('src/generated/resources/')

            mods {
                additionalbars {
                    source sourceSets.main
                    source sourceSets.bop
                    source sourceSets.byg
                }
            }
        }
    }
}

repositories {
    maven {
        url 'https://www.dogforce-games.com/maven'
    }
}

dependencies {
    minecraft project.forge_version
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "additionalbars",
            "Specification-Vendor": "codenamerevy",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor" :"codenamerevy",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
