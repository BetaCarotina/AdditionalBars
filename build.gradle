buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = project.mod_version
group = project.maven_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.minecraft_version + '-' + project.archive_base_name

java.toolchain.languageVersion = JavaLanguageVersion.of(16) // Mojang ships Java 8 to end users, so your mod should target Java 8.
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: project.mappings_channel, version: project.mappings_version
    runs {
        client {
            workingDirectory file('run')

            mods {
                additionalbars {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('run')

            mods {
                additionalbars {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('run')

            environment 'target', 'fmluserdevdata'
            //This fixes Mixin application problems from other mods because their refMaps are SRG-based,
            // but we're in a MCP env
            property "mixin.env.disableRefMap", "true"

            args '--all', '--output', file('src/generated/resources'),
                    '--mod', 'additionalbars',
                    '--existing', file('src/main/resources/')

            mods {
                additionalbars {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
}
// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": project.name,
                "Specification-Vendor": "AdditionalBars",
                "Specification-Version": "${project.mod_version}", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${project.mod_version}",
                "Implementation-Vendor" :"AdditionalBars",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
